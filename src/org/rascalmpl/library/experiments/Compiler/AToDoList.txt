This is a global todo list for the compiler

Issues:
- empty catch clause not handled by StackValidator
- TypeUtils::extractScopes: needs more stack space than computed by StackValidator
- lang::rascal::grammar::definition::Symbols:sym2symbol
  - The Symbol:: qualifier should be unnneccessary
  - empty (from Rascal.rsc) can cause trouble.

Bootstrapping
x Compile and test parser generator 
x Compile and test type checker
x Compile and test compiler
- Test compiled compiler

Runtime environment end IDE integration
- Make use-def etc info available for the Rascal IDE
- Replace current interpreter-based parser generator used by the compiler by compiled parser generator
- Detach the execute command from the interpreter and make it stand alone
- Adapt the debugger to run with compiled code
- Create a RascalShell for compiled code
- Replace interpreter by compiler in IDE 

Code improvement
- TypeUtils and TypeReifier are ready for a rewrite
- Overall code cleanup.
- Overal consistency check on naming of primitives in RascalPrimitive and MuPrimitive

Performance improvement
- Make the compiler truly incremental:
  - Best done using import graph (still to be provided by typechecker) 
- Optimize the case of an overloaded function call with only one remaining alternative.
- Currently, RVM does null pointer checking; these checks can disappear when there is a guarantee that
  variables are always initialized.
- Potentially, more constant elimination could be done (e.g. replace size([1,2,3]) by 3)
x Switch to Ferry's RVM structure
x Connect Ferry's bytecode generator
x Optimize serialization of RVMExecutable
x Finalize the reachability analysis for visit and descent.
x When compiling patterns: propagate the type of the subject downwards and eliminate subtype checks.
x Make a Java/muRascal bridge to allow calling muRascal code from Java. This makes it possible
  to write parts of the Library in Java (e.g. descent and visit)

Documentation
x Add comments to all enumeration elements in MuPrimitive
- Add comments to all enumeration elements in RascalPrimitive
- Add a global comment to every file
- Write a global architecture document
- Write a paper to describe and evaluate the compiler